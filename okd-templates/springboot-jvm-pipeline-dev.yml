---
apiVersion: v1
kind: Template
metadata:
  annotations:
    description: "Build and Deploy Pipeline template for Spring Boot applications built using an ephemeral Jenkins Pipeline"
    iconClass: icon-jenkins
    openshift.io/display-name: "Spring Boot JVM Build & Deploy Pipeline for DEV"
    template.openshift.io/bindable: "false"
    tags: "java,spring-boot,jenkins-ci,jenkins"
    version: "1.0"
  name: springboot-jvm-pipeline-dev
objects:
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        description: ${APP_NAME} Spring Boot JVM Docker Build Configuration
      labels:
        app: ${APP_NAME}
      name: ${APP_NAME}-jvm-docker
    spec:
      failedBuildsHistoryLimit: 2
      successfulBuildsHistoryLimit: 2
      nodeSelector: null
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}:latest
      runPolicy: Serial
      source:
        type: Dockerfile
        dockerfile: |-
            FROM openshift/jdk-ubi-minimal:8.1
            LABEL git-commit=$GIT_COMMIT
            COPY ./app.jar /deployments/app.jar
            EXPOSE 8080 8778 8443
            USER 1001
            ENTRYPOINT [ "/deployments/run-java.sh" ]
      strategy:
        dockerStrategy:
          forcePull: true
          from:
            kind: ImageStreamTag
            name: jdk-ubi-minimal:8.1
            namespace: openshift
      triggers: []

  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: "${APP_NAME}"
      name: "${APP_NAME}-pipeline"
    spec:
      failedBuildsHistoryLimit": 2
      successfulBuildsHistoryLimit: 2
      nodeSelector: ~
      runPolicy: Serial
      source:
        git:
          ref: "${GIT_BRANCH}"
          uri: "${GIT_REPOSITORY}"
        type: Git
      strategy:
        jenkinsPipelineStrategy:
          jenkinsfile: |-
              pipeline {
                agent any
                stages{
                  stage("Initialize") {
                    steps {
                      script {
                        def namespace = openshift.withCluster() { openshift.withProject() { openshift.project() } }
                        
                        // Kind of hokey, but this gets around our certs being internally signed
                        try {
                          git url: "%%GIT_URL%%", branch: "%%GIT_BRANCH%%", credentialsId: "$namespace-${BUILD_SECRET}"
                        } catch (Exception e) {
                          sh "git config http.sslVerify false"
                          git url: "%%GIT_URL%%", branch: "%%GIT_BRANCH%%", credentialsId: "$namespace-${BUILD_SECRET}"
                        }                   
                        def jenkinsPipeline = load 'src/org/clg/pipeline/build.groovy'
                        def params = ['pipelineCodeGitUrl': '%%GIT_URL%%', 'pipelineCodeGitBranch': '%%GIT_BRANCH%%', 'appName' : "${APP_NAME}", 'gitBranch': "${GIT_BRANCH}", 'gitUrl': "${GIT_REPOSITORY}", 'gitSecret': "${BUILD_SECRET}"]
                        jenkinsPipeline.start(params)
                      }
                    }
                  }
                }
              }
        type: JenkinsPipeline
      triggers: []

  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: "${APP_NAME}"
      name: "${APP_NAME}"
    spec:
      lookupPolicy:
        local: false

  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: ${APP_NAME} Spring Boot JVM Service.
      labels:
        app: ${APP_NAME}
      name: ${APP_NAME}
    spec:
      ports:
      - name: 8080-tcp
        port: 8080
        protocol: TCP
        targetPort: 8080
      selector:
        deploymentConfig: ${APP_NAME}

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      annotations:
        description: ${APP_NAME} Spring Boot JVM Deployment Configuration.
      labels:
        app: ${APP_NAME}
      name: ${APP_NAME}
    spec:
      replicas: 1
      selector:
        deploymentConfig: ${APP_NAME}
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            app: ${APP_NAME}
            deploymentConfig: ${APP_NAME}
          name: ${APP_NAME}
        spec:
          initContainers:
          - args:
              - '-c'
              - >-
                cd /tmp && csplit -z -f crt- $ca_bundle '/-----BEGIN CERTIFICATE-----/' '{*}'
                && for file in crt-*; do keytool -import -noprompt -keystore
                $truststore_jks -file $file -storepass $password -alias
                service-$file; done
            command:
              - /bin/bash
            env:
              - name: ca_bundle
                value: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
              - name: truststore_jks
                value: /var/run/secrets/java.io/keystores/truststore.jks
              - name: password
                value: changeit
            image: 'docker-registry.default.svc:5000/openshift/jdk-ubi-minimal:8.1'
            imagePullPolicy: IfNotPresent
            name: pem-to-truststore
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
              - mountPath: /var/run/secrets/java.io/keystores
                name: keystore-volume
          containers:
          - env:
            - name: JAVA_OPTIONS
              value: '-Djavax.net.ssl.trustStore=/var/run/secrets/java.io/keystores/truststore.jks -Djavax.net.ssl.trustStorePassword=changeit'
            envFrom:
            - configMapRef:
                name: ${APP_NAME}-cm 
            - secretRef:
                name: ${APP_NAME}-sk
            image: ${APP_NAME}
            imagePullPolicy: Always
            name: ${APP_NAME}
            ports:
            - containerPort: 8778
              name: jolokia
              protocol: TCP
            - containerPort: 8080
              name: http
              protocol: TCP
            - containerPort: 8443
              name: https
              protocol: TCP
            volumeMounts:
            - mountPath: /var/run/secrets/java.io/keystores
              name: keystore-volume
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /actuator/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 180
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /actuator/health
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 10
              periodSeconds: 10
              successThreshold: 1
              timeoutSeconds: 1
          terminationGracePeriodSeconds: 75
          volumes:
          - emptyDir: {}
            name: keystore-volume
      triggers:
      - imageChangeParams:
          containerNames:
          - ${APP_NAME}
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
        type: ImageChange

  - apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: "${APP_NAME}"
        maker: jenkinsstrategy-java-pipeline-dev
      name: "${APP_NAME}-pipeline-rc"
    spec:
      failedBuildsHistoryLimit": 2
      nodeSelector: ~
      runPolicy: Serial
      strategy:
        jenkinsPipelineStrategy:
          jenkinsfile: |-
              pipeline {
                agent any
                stages {
                  stage("Push RC to Registry") {
                    steps {
                      script {
                        openshift.withCluster() {
                          openshift.withProject(){
                            def bc = openshift.selector("buildconfig", "${APP_NAME}-rc")
                            bc.startBuild()
                            bc.logs("-f")
                          }
                        }
                      }
                    }
                  }
                }
              }
        type: JenkinsPipeline
      successfulBuildsHistoryLimit: 2
      
  - apiVersion: v1
    kind: BuildConfig
    metadata:
      annotations:
        description: This is a Build Configuration.
      labels:
        app: ${APP_NAME}
        maker: jenkinsstrategy-java-pipeline-dev
      name: ${APP_NAME}-rc
    spec:
      failedBuildsHistoryLimit: 2
      nodeSelector: ~
      output:
        pushSecret:
          name: ${DEPLOY_SECRET}
        to:
          kind: DockerImage
          name: ${CONTAINER_REGISTRY}/cicd/${APP_NAME}:deploy
      runPolicy: Serial
      source:
        type: Dockerfile
        dockerfile: |-
          FROM ${APP_NAME}:latest
          ENTRYPOINT [ "/deployments/run-java.sh" ]
      strategy:
        dockerStrategy:
          forcePull: true
          from:
            kind: ImageStreamTag
            name: ${APP_NAME}:latest
      successfulBuildsHistoryLimit: 2
      triggers: []

parameters:
  -
    description: "Name of the deployable application."
    displayName: "Application Name"
    name: APP_NAME
    required: true
  -
    description: "Git repository for source code."
    displayName: "Git Repo"
    name: GIT_REPOSITORY
    required: true
  -
    description: "Git repository branch to build app from"
    displayName: "Git Branch"
    name: GIT_BRANCH
    required: true
    value: master
  -
    description: "Name of the secret for Git credentials."
    displayName: "Build Secret"
    name: BUILD_SECRET
    required: true
    value: git-secret
  -
    description: "Name of the secret for External Registry credentials."
    displayName: "External Registry Secret"
    name: DEPLOY_SECRET
    required: true
    value: registry-secret
  -
    description: "External container Registry for promotions."
    displayName: "External Container Registry"
    name: CONTAINER_REGISTRY
    required: true
    value: "%%EXTERNAL_CONTAINER_REGISTRY%%"
